// Generated by CoffeeScript 1.9.1
var chai, rewire, yt;

chai = require('chai');

rewire = require('rewire');

yt = rewire('../index.js');

describe('yt-captions', function() {
  it('should export a module function', function() {
    return chai.assert.isFunction(yt.insert);
  });
  describe('parameter checks', function() {
    it('should return an error if null auth_token is passed', function(done) {
      return yt.insert(null, null, null, null, null, function(error) {
        chai.expect(error).to.be.an["instanceof"](Error);
        return done();
      });
    });
    it('should return an error if null video_id is passed', function(done) {
      return yt.insert('auth_token', null, null, null, null, function(error) {
        chai.expect(error).to.be.an["instanceof"](Error);
        return done();
      });
    });
    it('should return an error if null caption_name is passed', function(done) {
      return yt.insert('auth_token', 'video_id', null, null, null, function(error) {
        chai.expect(error).to.be.an["instanceof"](Error);
        return done();
      });
    });
    it('should return an error if null caption_file is passed', function(done) {
      return yt.insert('auth_token', 'video_id', 'caption_name', null, null, function(error) {
        chai.expect(error).to.be.an["instanceof"](Error);
        return done();
      });
    });
    return it('should return an error if null caption_language is passed', function(done) {
      return yt.insert('auth_token', 'video_id', 'caption_name', 'caption_file', null, function(error) {
        chai.expect(error).to.be.an["instanceof"](Error);
        return done();
      });
    });
  });
  describe('file checks', function() {
    return it('should return an error if caption_file does not exist', function(done) {
      yt.__set__({
        'fs.existsSync': function(file) {
          return false;
        }
      });
      return yt.insert('auth_token', 'video_id', 'caption_name', 'caption_file', 'caption_language', function(error) {
        chai.expect(error).to.be.an["instanceof"](Error);
        return done();
      });
    });
  });
  return describe('request checks', function() {
    before(function() {
      yt.__set__('fs.existsSync', function(path) {
        return true;
      });
      yt.__set__('fs.statSync', function(path) {
        return {
          size: 100
        };
      });
      return yt.__set__('fs.createReadStream', function(path, options) {
        return {
          path: path,
          bytesRead: 0
        };
      });
    });
    it('should have all the request options set', function(done) {
      yt.__set__({
        'request': function(options, callback) {
          var body, fs, qs, stream;
          chai.expect(options.method).to.equal('POST');
          chai.expect(options.url).to.equal('https://www.googleapis.com/upload/youtube/v3/captions');
          qs = {
            part: 'snippet',
            uploadType: 'multipart',
            alt: 'json'
          };
          chai.expect(options.qs).to.deep.equal(qs);
          chai.expect(options.headers['Authorization']).to.equal('Bearer auth_token');
          chai.expect(options.headers['Content-Length']).to.equal(100);
          chai.expect(options.multipart.chunked).to.equal(true);
          chai.expect(options.multipart.data[0]['Content-Type']).to.equal('application/json');
          chai.expect(options.multipart.data[1]['Content-Type']).to.equal('text/plain');
          body = {
            snippet: {
              videoId: 'video_id',
              name: 'caption_name',
              language: 'caption_language'
            }
          };
          chai.expect(options.multipart.data[0]['body']).to.deep.equal(JSON.stringify(body));
          fs = yt.__get__('fs');
          stream = fs.createReadStream('caption_file');
          chai.expect(options.multipart.data[1]['body']).to.deep.equal(stream);
          return done();
        }
      });
      return yt.insert('auth_token', 'video_id', 'caption_name', 'caption_file', 'caption_language', function(error) {});
    });
    it('should return an error if request fails', function(done) {
      yt.__set__({
        'request': function(options, callback) {
          return callback(new Error);
        }
      });
      return yt.insert('auth_token', 'video_id', 'caption_name', 'caption_file', 'caption_language', function(error) {
        chai.expect(error).to.be.an["instanceof"](Error);
        return done();
      });
    });
    it('should return an error if response is 400', function(done) {
      var body;
      body = {
        error: {
          code: 400,
          message: 'contentRequired'
        }
      };
      yt.__set__({
        'request': function(options, callback) {
          return callback(null, {
            statusCode: 400
          }, body);
        }
      });
      return yt.insert('auth_token', 'video_id', 'caption_name', 'caption_file', 'caption_language', function(error, body) {
        chai.expect(error).to.be.an["instanceof"](Error);
        chai.expect(body.code).to.be.equal(400);
        return done();
      });
    });
    it('should return an error if response is 403', function(done) {
      var body;
      body = {
        error: {
          code: 403,
          message: 'forbidden'
        }
      };
      yt.__set__({
        'request': function(options, callback) {
          return callback(null, {
            statusCode: 403
          }, body);
        }
      });
      return yt.insert('auth_token', 'video_id', 'caption_name', 'caption_file', 'caption_language', function(error, body) {
        chai.expect(error).to.be.an["instanceof"](Error);
        chai.expect(body.code).to.be.equal(403);
        return done();
      });
    });
    it('should return an error if response is 404', function(done) {
      var body;
      body = {
        error: {
          code: 404,
          message: 'videoNotFound'
        }
      };
      yt.__set__({
        'request': function(options, callback) {
          return callback(null, {
            statusCode: 404
          }, body);
        }
      });
      return yt.insert('auth_token', 'video_id', 'caption_name', 'caption_file', 'caption_language', function(error, body) {
        chai.expect(error).to.be.an["instanceof"](Error);
        chai.expect(body.code).to.be.equal(404);
        return done();
      });
    });
    it('should return an error if response is 409', function(done) {
      var body;
      body = {
        error: {
          code: 409,
          message: 'captionExists'
        }
      };
      yt.__set__({
        'request': function(options, callback) {
          return callback(null, {
            statusCode: 409
          }, body);
        }
      });
      return yt.insert('auth_token', 'video_id', 'caption_name', 'caption_file', 'caption_language', function(error, body) {
        chai.expect(error).to.be.an["instanceof"](Error);
        chai.expect(body.code).to.be.equal(409);
        return done();
      });
    });
    return it('should return successfully', function(done) {
      yt.__set__({
        'request': function(options, callback) {
          return callback(null, {
            statusCode: 200
          }, null);
        }
      });
      return yt.insert('auth_token', 'video_id', 'caption_name', 'caption_file', 'caption_language', function(error) {
        chai.expect(error).to.be.not["instanceof"](Error);
        return done();
      });
    });
  });
});
